from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()


class Category(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=256)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    slug = models.SlugField(
        "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
        unique=True,
        help_text=(
            "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è URL; "
            "—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã –ª–∞—Ç–∏–Ω–∏—Ü—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ."
        ),
    )
    is_published = models.BooleanField(
        "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
        default=True,
        help_text="–°–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
    )
    created_at = models.DateTimeField("–î–æ–±–∞–≤–ª–µ–Ω–æ", auto_now_add=True)

    class Meta:
        verbose_name = "–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"

    def __str__(self):
        return self.title


class Location(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞", max_length=256)
    is_published = models.BooleanField("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", default=True)
    created_at = models.DateTimeField("–î–æ–±–∞–≤–ª–µ–Ω–æ", auto_now_add=True)

    class Meta:
        verbose_name = "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        verbose_name_plural = "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"

    def __str__(self):
        return self.name


class Post(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=256)
    text = models.TextField("–¢–µ–∫—Å—Ç")
    pub_date = models.DateTimeField(
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
        help_text=(
            "–ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º ‚Äî "
            "–º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
        ),
    )
    author = models.ForeignKey(
        User, verbose_name="–ê–≤—Ç–æ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", on_delete=models.CASCADE
    )
    location = models.ForeignKey(
        Location,
        verbose_name="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
    )
    category = models.ForeignKey(
        Category,
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        on_delete=models.SET_NULL,
        null=True,
    )
    is_published = models.BooleanField(
        "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
        default=True,
        help_text="–°–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
    )
    created_at = models.DateTimeField("–î–æ–±–∞–≤–ª–µ–Ω–æ", auto_now_add=True)

    image = models.ImageField(  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        upload_to="posts_images/",
        blank=True,
        null=True,
    )

    class Meta:
        verbose_name = "–ø—É–±–ª–∏–∫–∞—Ü–∏—è"
        verbose_name_plural = "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏"

    def __str__(self):
        return self.title


class Comment(models.Model):
    post = models.ForeignKey(
        Post,
        verbose_name="–ü—É–±–ª–∏–∫–∞—Ü–∏—è",
        on_delete=models.CASCADE,
        related_name="comments",
    )
    author = models.ForeignKey(
        User, verbose_name="–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", on_delete=models.CASCADE
    )
    text = models.TextField("–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    created_at = models.DateTimeField("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
                                      auto_now_add=True)

    class Meta:
        verbose_name = "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        verbose_name_plural = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
        ordering = ["-created_at"]

    def __str__(self):
        return f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {self.author} –∫ –ø–æ—Å—Ç—É ¬´{self.post}¬ª"
